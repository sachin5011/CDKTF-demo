name: My_first_git_action

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Install node v18
      uses: actions/setup-node@v1
      with:
        node-version: 18
        
    - name: Install Typescript
      run: npm install -g typescript
         
        
    - uses: actions/checkout@v1
    - name: Install Terraform
      uses: little-core-labs/install-terraform@v2.0.0
      with:
          version: 1.5.6

    - name: Install CDKTF-CLI
      run: npm install -g cdktf-cli
          

    - name: Checks node and Terraform version
      run : |
        echo "=== Terraform Version ==="
        terraform -v
        echo "=== Node Version ==="
        node -v
        echo "=== npm Version ==="
        npm -v
        echo "=== Typescript Version ==="
        tsc -v
        echo "=== CDKTF CLI Version ==="
        cdktf --version
    
    - name: Creating CDKTF project
      run: |
        pwd
        mkdir cdktf-demo
        cd cdktf-demo
        # cdktf init --template=typescript --local
        # ls


    - name: Listing CDKTF Directory
      run: |
        pwd
        cd /home/runner/work/CDKTF-demo/CDKTF-demo/cdktf-demo
        pwd
        ls

    - name: Creating CDKTF project
      run : |
        cd /home/runner/work/CDKTF-demo/CDKTF-demo/cdktf-demo

        cdktf init --template=typescript \
          --project-name=learn-terraform-cdktf-applications \
          --project-description="Learn how to develop CDKTF applications" \
          --providers="kubernetes@~>2.14" \
          --local
  
    - name: Installing Project dependencies
      run : |
            npm install --save-dev @types/node
            npm install @cdktf/provider-databricks
            echo "Installed Successfully"

    - name: Ls node_modules
      run: |
        cd node_modules
        ls

    - name: Ls cdktf-demo
      run: |
          cd cdktf-demo
          ls

    - name: Adding Script to main.ts
      run: |
        cd cdktf-demo
        touch main.ts
        cat << import { Construct } from "constructs";
        import { App, TerraformOutput, TerraformStack } from "cdktf";
        import { DatabricksProvider, DataDatabricksCurrentUser, Notebook, Job } from "@cdktf/provider-databricks";
        import * as vars from "./vars";
        
        class MyStack extends TerraformStack {
          constructor(scope: Construct, name: string) {
            super(scope, name);
        
            new DatabricksProvider(this, "databricksAuth", {})
        
            const currentUser = new DataDatabricksCurrentUser(this, "currentUser", {});
        
            // Define the notebook.
            const notebook = new Notebook(this, "notebook", {
              path: `${currentUser.home}/CDKTF/${vars.resourcePrefix}-notebook.py`,
              language: "PYTHON",
              contentBase64: Buffer.from("display(spark.range(10))", "utf8").toString("base64")
            });
        
            // Define the job to run the notebook.
            const job = new Job(this, "job", {
              name: `${vars.resourcePrefix}-job`,
              newCluster: {
                numWorkers: vars.numWorkers,
                sparkVersion: vars.sparkVersion,
                nodeTypeId: vars.nodeTypeId
              },
              notebookTask: {
                notebookPath: `${currentUser.home}/CDKTF/${vars.resourcePrefix}-notebook.py`
              },
              emailNotifications: {
                onSuccess: [ currentUser.userName ],
                onFailure: [ currentUser.userName ]
              }
            });
        
            // Output the notebook and job URLs.
            new TerraformOutput(this, "Notebook URL", {
              value: notebook.url
            });
        
            new TerraformOutput(this, "Job URL", {
              value: job.url
            });
          }
        }
        
        const app = new App();
        new MyStack(app, "cdktf-demo");
        app.synth();>> main.ts
        


         
